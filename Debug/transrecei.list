
transrecei.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000358  08000358  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000358  08000358  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000358  08000358  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000358  08000358  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000358  08000358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800035c  0800035c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  08000380  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000380  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009c6  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001a0  00000000  00000000  00020a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00020bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00020c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001c2b  00000000  00000000  00020c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000005c7  00000000  00000000  0002285b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007e72  00000000  00000000  00022e22  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002ac94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0002ad10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000340 	.word	0x08000340

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	08000340 	.word	0x08000340

080001d4 <main>:
uint8_t* URDR =   (uint8_t*)0x40004424;



int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0

	*UCLK |= (1<<17);
 80001da:	4b2a      	ldr	r3, [pc, #168]	; (8000284 <main+0xb0>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	4b28      	ldr	r3, [pc, #160]	; (8000284 <main+0xb0>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80001e8:	601a      	str	r2, [r3, #0]
	// rcc clock enable for apb1 usart2

	*PACLK |= (1<<17);
 80001ea:	4b27      	ldr	r3, [pc, #156]	; (8000288 <main+0xb4>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	4b25      	ldr	r3, [pc, #148]	; (8000288 <main+0xb4>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80001f8:	601a      	str	r2, [r3, #0]
		// rcc clock enable for ahb GPIOA

	*PAMOD |= (0x2<<4);
 80001fa:	4b24      	ldr	r3, [pc, #144]	; (800028c <main+0xb8>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b22      	ldr	r3, [pc, #136]	; (800028c <main+0xb8>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f042 0220 	orr.w	r2, r2, #32
 8000208:	601a      	str	r2, [r3, #0]
	//mod PA TX set to alternate push-pull

	*UCR1 &= ~(1<<12);
 800020a:	4b21      	ldr	r3, [pc, #132]	; (8000290 <main+0xbc>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b1f      	ldr	r3, [pc, #124]	; (8000290 <main+0xbc>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000218:	601a      	str	r2, [r3, #0]
	*UCR1 &= ~(1<<28);
 800021a:	4b1d      	ldr	r3, [pc, #116]	; (8000290 <main+0xbc>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b1b      	ldr	r3, [pc, #108]	; (8000290 <main+0xbc>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000228:	601a      	str	r2, [r3, #0]
	// wordlength 8 bits set

	*UBRR=0x1.388p+8;
 800022a:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <main+0xc0>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000232:	801a      	strh	r2, [r3, #0]
	//baud rate set for 36MHZ APB1 as 115200

	*UCR2 &= ~(0x3<<12);
 8000234:	4b18      	ldr	r3, [pc, #96]	; (8000298 <main+0xc4>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <main+0xc4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000242:	601a      	str	r2, [r3, #0]
	// stop bit set as 1bit

	*UCR1 |= 0xD;
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <main+0xbc>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	4b11      	ldr	r3, [pc, #68]	; (8000290 <main+0xbc>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f042 020d 	orr.w	r2, r2, #13
 8000252:	601a      	str	r2, [r3, #0]
	// UE TE RE enable
	while (1) {

	  if (*UISR & 1<<5) //if RX is not empty
 8000254:	4b11      	ldr	r3, [pc, #68]	; (800029c <main+0xc8>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f003 0320 	and.w	r3, r3, #32
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f8      	beq.n	8000254 <main+0x80>
	  {
	   char temp = *URDR; //fetch the data received
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <main+0xcc>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	71fb      	strb	r3, [r7, #7]
	   *URDR = temp;  //send it back out
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <main+0xcc>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	701a      	strb	r2, [r3, #0]
	   while (!(*UISR & 1<<6)); //wait for TX to be complete
 8000272:	bf00      	nop
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <main+0xc8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800027e:	2b00      	cmp	r3, #0
 8000280:	d0f8      	beq.n	8000274 <main+0xa0>
	  if (*UISR & 1<<5) //if RX is not empty
 8000282:	e7e7      	b.n	8000254 <main+0x80>
 8000284:	20000000 	.word	0x20000000
 8000288:	20000004 	.word	0x20000004
 800028c:	20000008 	.word	0x20000008
 8000290:	2000000c 	.word	0x2000000c
 8000294:	20000014 	.word	0x20000014
 8000298:	20000010 	.word	0x20000010
 800029c:	20000018 	.word	0x20000018
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490e      	ldr	r1, [pc, #56]	; (80002e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0e      	ldr	r2, [pc, #56]	; (80002e8 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0b      	ldr	r2, [pc, #44]	; (80002ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0b      	ldr	r4, [pc, #44]	; (80002f0 <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002ce:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002d2:	f000 f811 	bl	80002f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d6:	f7ff ff7d 	bl	80001d4 <main>

080002da <LoopForever>:

LoopForever:
    b LoopForever
 80002da:	e7fe      	b.n	80002da <LoopForever>
  ldr   r0, =_estack
 80002dc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80002e8:	08000360 	.word	0x08000360
  ldr r2, =_sbss
 80002ec:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80002f0:	2000003c 	.word	0x2000003c

080002f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC1_2_IRQHandler>
	...

080002f8 <__libc_init_array>:
 80002f8:	b570      	push	{r4, r5, r6, lr}
 80002fa:	4e0d      	ldr	r6, [pc, #52]	; (8000330 <__libc_init_array+0x38>)
 80002fc:	4c0d      	ldr	r4, [pc, #52]	; (8000334 <__libc_init_array+0x3c>)
 80002fe:	1ba4      	subs	r4, r4, r6
 8000300:	10a4      	asrs	r4, r4, #2
 8000302:	2500      	movs	r5, #0
 8000304:	42a5      	cmp	r5, r4
 8000306:	d109      	bne.n	800031c <__libc_init_array+0x24>
 8000308:	4e0b      	ldr	r6, [pc, #44]	; (8000338 <__libc_init_array+0x40>)
 800030a:	4c0c      	ldr	r4, [pc, #48]	; (800033c <__libc_init_array+0x44>)
 800030c:	f000 f818 	bl	8000340 <_init>
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	10a4      	asrs	r4, r4, #2
 8000314:	2500      	movs	r5, #0
 8000316:	42a5      	cmp	r5, r4
 8000318:	d105      	bne.n	8000326 <__libc_init_array+0x2e>
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000320:	4798      	blx	r3
 8000322:	3501      	adds	r5, #1
 8000324:	e7ee      	b.n	8000304 <__libc_init_array+0xc>
 8000326:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800032a:	4798      	blx	r3
 800032c:	3501      	adds	r5, #1
 800032e:	e7f2      	b.n	8000316 <__libc_init_array+0x1e>
 8000330:	08000358 	.word	0x08000358
 8000334:	08000358 	.word	0x08000358
 8000338:	08000358 	.word	0x08000358
 800033c:	0800035c 	.word	0x0800035c

08000340 <_init>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr

0800034c <_fini>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	bf00      	nop
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr
